#' Filter based on gene expression variance
#'

#----------------------------------------------------------------------------------------------------
.VarianceFilter <- setClass("VarianceFilter",
                            slots = c(mtx.assay = "matrix",
			              quiet = "logical"
		            )
)

#----------------------------------------------------------------------------------------------------
printf <- function(...) print(noquote(sprintf(...)))
#----------------------------------------------------------------------------------------------------
setGeneric("getCandidates", signature="obj", function(obj) standardGeneric("getCandidates"))

#----------------------------------------------------------------------------------------------------
VarianceFilter <- function(mtx.assay=matrix(), quiet=TRUE)
{
    .VarianceFilter(mtx.assay = mtx.assay, quiet = quiet)

} # VarianceFilter, the constructor
#----------------------------------------------------------------------------------------------------
setMethods("getCandidates", "VarianceFilter",

    function(obj,target.gene){
        # Designate the target genes and tfs
	tfs <- setdiff(rownames(mtx.assay), target.gene)
	tf.mtx <- mtx.assay[-c(which(rownames(mtx.assay) == target.gene)),]
	target.mtx <- mtx.assay[which(rownames(mtx.assay) == target.gene),]

	# Find the variances
	tf.var <- apply(tf.mtx,1,var)
	target.var <- var(target.mtx)

	# Return only the genes with variances less than the target gene
	return(names(tf.var < target.var))
	}
)
#----------------------------------------------------------------------------------------------------
