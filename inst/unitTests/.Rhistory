source("test_TReNA.R"); runTests()
source("test_TReNA.R"); runTests()
q()
source("test_TReNA.R"); runTests()
q()
source("test_TReNA.R"); runTests()
dim(mtx)
mtx
matrix()
matrix(nrow=0)
matrix(data=NULL, nrow=0)
tbl.anno
?glmnet
     x=matrix(rnorm(100*20),100,20)
     y=rnorm(100)
     fit1=glmnet(x,y)

x
fivenum(x)
dim(mtx.expression)
sprintf("gene%02d", 1:10)
y
mtx.expression[1:10, 1:10]
dim(mtx.expression)
dim(matrix(rnorm(100*20),100,20))
dim(mtx.expression)
wdth(500)
mtx.expression
mtx.expression
fit1
fit1
mtx.expression
mtx.expression
fit1
fit1$beta
plot(fit1)
jitter(1:10)
args(jitter)
jitter(1:10, amount=3)
jitter(1:10, amount=2)
jitter(1:10, amount=1)
plot(fit)
plot(fit)
fit$beta
fit$beta
plot(fit)
plot(fit, label=TRUE)
fit
plot(fit)
plot(fit)
plot(fit, label=TRUE)
heatmap(mtx)
ntx
mtx
rnorm(1)
rnorm(1:10
)
10 * abs(rnorm(1:10)
)
100 * abs(rnorm(1:10)
)
100 * abs(rnorm(1:10))
mtx
heatmap(mtx)
names(fit)
fit$beta
?fit
?glmnet
mtx
     x=matrix(rnorm(100*20),100,20)
     y=rnorm(100)
     fit1=glmnet(x,y)

y
glmnet
glm
?glm
?glmnet
q()
source('test_TReNA.R")
source("test_TReNA.R")
runTests()
q()
source("test_TReNA.R"); runTests()
q()
source("test_TReNA.R"); runTests()
q()
source("test_TReNA.R"); runTests()
source("test_TReNA.R"); runTests()
)
TF.genes
length(target.genes)
TF.genes
head(colnames(mtx))
setdiff(colname(mtx), TF.genes)
setdiff(colnames(mtx), TF.genes)
target.genes
target.genes
cor(mtx[, target.genes[1]], mtx[, TF.genes[1]])
cor(mtx[, target.genes[2]], mtx[, TF.genes[1]])
cor(mtx[, target.genes[1]], mtx[, TF.genes[1]])
apply(mtx, 2, function(vec) cor(vec, mtx[,TF.genes[1]]))
apply(mtx[, -c(TF,target), 2, function(vec) cor(vec, mtx[,TF])))
apply(mtx[, -c(TF,target)], 2, function(vec) cor(vec, mtx[,TF]))
apply(mtx[, -list(TF,target)], 2, function(vec) cor(vec, mtx[,TF]))
TF
target
dim(mtx)
dim(mtx[, -c("gene.01")])
head(TF.genes)
lapply(c(TF, target) function(g) grep(g, colnames(mtx))
lapply(c(TF, target), function(g) grep(g, colnames(mtx))
)
lapply(c(TF, target), function(g) grep(g, colnames(mtx)))
unlist(lapply(c(TF, target), function(g) grep(g, colnames(mtx))))
exclude.these.columns <- unlist(lapply(c(TF, target), function(g) grep(g, colnames(mtx))))
exclude.these.columns
dim(mtx[, -exclude.these.columns])
mtx[1:10, 1:10]
range(mtx[1:10, 1:10])
range(apply(mtx.sub, 2, function(col) cor(col, mtx[, TF])))
max(apply(mtx.sub, 2, function(col) cor(col, mtx[, TF])))
target.col
target
dim(features)
cv.out$lambda.min
plot(fit)
fit.2 = glmnet(features, target, lambda=1.99054)
betas <- as.matrix(t(coef(cv.out,s="lambda.min")))
betas
head(target.genes)
coef(cv.out)
betas
betas[1]
betas["(Intercept)"]
names(betas)
class(betas)
dim(betas)
betas[1, "(Intercept)"]
betas[1, TF]
all(betas[1, 2:nrow(betas]) == 0)
all(betas[1, 2:nrow(betas)] == 0)
(betas[1, 2:nrow(betas)] 
)
betas[1, 1:10]
betas[1, 3:nrow(betas)]
betas[1, 3:ncol(betas)]
all(betas[1, 3:ncol(betas)] == 0)
betas[1, TF.genes]
sum(betas[1, TF.genes])
sum(betas[1, TF.genes]) == betas[1, TF]
source("test_TReNA.R"); runTests()
betas[1, "(Intercept)"]
predict(fit, s=lambda.min, newx=features)
target
source("test_TReNA.R"); runTests()
q()
source("test_TReNA.R"); runTests()
source("test_TReNA.R"); runTests()
 mtx[, target.gene]
jitter(mtx[, target.gene], amount=4)
jitter(mtx[, target.gene], amount=10)
head(mtx[, TF.1] + mtx[, target.gene])
head(mtx[, TF.2] + mtx[, target.gene])
head(mtx[, TF.1]
)
(mtx[, TF.2] + mtx[, target.gene]) == mtx[, TF.1]
 mtx[, target.gene]) == mtx[, TF.1] - (mtx[, TF.2]
 mtx[, target.gene]) == mtx[, TF.1] - mtx[, TF.2]
 mtx[, target.gene] == mtx[, TF.1] - mtx[, TF.2]
all( mtx[, target.gene] == mtx[, TF.1] - mtx[, TF.2])
lambda.min
betas
source("test_TReNA.R"); runTests()
x <- test_developAndFitDummyTestData()
names(x)
source("test_TReNA.R"); runTests()\
source("test_TReNA.R"); runTests()
x <- test_developAndFitDummyTestData()
names(x)
x$tf.genes
x$target.genes
x$correlated.tfs
x$target.gene
x$correlated.target
args(TReNA)
names(x)
dim(x$assay)
x$assay[1:10, 1:10]
x$tf.genes
q()
source("test_TReNA.R"); runTests()
q()
source("test_TReNA.R"); runTests()
names(x)
x$assay
source("test_TReNA.R"); runTests()
names(x)
x$correlated.target
q()
source("test_TReNA.R"); runTests()
dim(mtx)
tfs.of.interest
dim(features)
dim(target)
class(target)
target
class(cv.out)
class(coef(cv.out))
as.matrix(coef(cv.out))
t(as.matrix(coef(cv.out)))
(as.matrix(t(coef(cv.out))))
length(deleters)
mtx.beta
deleters
mtx.beta
deleters
mtx.beta[-deleters,]
deleters
mtx.beta[-deleters,]
betas
deleters
mtx.beta[-deleters,]
mtx.beta <- mtx.beta[-deleters,]
mtx.beta
c
c
Q
q()
source("test_TReNA.R"); runTests()
c
q()
source("test_TReNA.R"); runTests()
c
q()
source("test_TReNA.R"); runTests()
c
c
betas
dim(assay)
assay[, 1:10]
?cv.glmnet
source("test_TReNA.R"); runTests()
c
q()
source("test_TReNA.R"); runTests()
source("test_TReNA.R"); runTests()
source("test_TReNA.R"); runTests()
test_fitDummyData()
test_fitDummyData()
test_fitDummyData()
test_fitDummyData()
test_fitDummyData()
names(x)
x$correlated.target
x$assay[, x$correlated.target]
x$correlated.tfs
betas[1, tf1]
betas[1, tf1]
betas
class(betas)
q()
source("test_TReNA.R"); runTests()
n
n
n
source("test_TReNA.R"); runTests()
n
n
n
target.values
tf1.values
tf2.values
betas
Q
q()
source("test_TReNA.R"); runTests()
mtx.beta
n
mtx.beta[-deleters, drop = FALSE]
mtx.beta[-deleters,]
mtx.beta[-deleters, drop=FALSE]
mtx.beta[-deleters, drop=TRUE]
deleters
mtx.beta[-deleters,]
mtx.beta[-deleters,,drop=FALSE]
Q
q()
source("test_TReNA.R"); runTests()
n
n
mtx.beta
c
n
n
n
betas
betas[tf1,1]
betas[tf2,1]
intercept; coef.tf1; coef.tf2
intercept + (coef.tf1 * assay[, tf.1])
intercept + (coef.tf1 * assay[, tf1])
intercept + (coef.tf1 * assay[, tf1]) + (coef.tf2 * assay[, tf2])
assay[, target.gene]
actual - predicted
sum(actual - predicted)
sum(abs(actual-predicted))
?cv.glmnet
q()
source("test_TReNA.R"); runTests()
c
q()
source("test_TReNA.R"); runTests()
c
c
q()
